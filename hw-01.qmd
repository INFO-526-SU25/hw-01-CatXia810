---
title: "HW 01"
author: "Cat Xia"
format: 
  html:
    embed-resources: true
toc: true
---

## 0 - Setup

```{r setup}
if (!require("pacman")) 
  install.packages("pacman")

# use this line for installing/loading
pacman::p_load(tidyverse, here, glue, scales, openintro) 

devtools::install_github("tidyverse/dsbox")
```

## 1 - Road traffic accidents in Edinburgh
```{r Load Data: accidents}
accidents_file_loc <- here("data", "accidents.csv")
accidents <- read.csv(accidents_file_loc)
#accidents |> 
  #glimpse()
```

```{r Data Wrangling: accidents}
#create column that separates weekdays from weekend. Change time to the hour minute second format
accidents <- accidents |>
  mutate(
    day_of_week_cat = ifelse(day_of_week %in% c("Saturday", "Sunday"), "Weekend", "Weekday"),
    time = hms(time),
    time_sec = as.numeric(time)
  )
    #code for ifelse from https://stackoverflow.com/questions/28893193/creating-factor-variables-weekend-and-weekday-from-date
```


```{r Accidents graph}
accidents |>
  #set x as time in the day, and group as severity
  ggplot(aes(x = time_sec, group = severity, fill = severity)) +
  
  #create a density plot with 50% fill
  geom_density(alpha = 0.7) +
  
  #set manual colors for the graph
  scale_fill_manual(values = c("Fatal" = "#aa93b0", "Serious" = "#9ecac8", "Slight" = "#fef39f")) +
  #Hexcodes taken from online color picker from the original picture
  
  #separate graphs based on weekend or weekday
  facet_wrap(~day_of_week_cat, nrow = 2) +
  
  #labels
  labs(
    x = "Time of day",
    y = "Density",
    fill = "Severity",
    title = "Number of accidents throughout the day",
    subtitle = "By day of week and severity",
    caption = "Source: Data.gov.uk (2018)"
  ) +
  
  scale_x_continuous(breaks = c(0, 14400, 28800, 43200, 57600, 72000, 86400),
                     
    # convert seconds back to HH:MM:SS                
    labels = function(x) {
    hours <- x %/% 3600
    minutes <- (x %% 3600) %/% 60
    seconds <- x %% 60
    sprintf("%02d:%02d:%02d", hours, minutes, seconds)
    #code for sprintf consulted with AI for formatting issues after attempting with https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/sprintf
  })+
  
  theme_minimal()

```

The graph illustrates the density of traffic accidents based on the time of day with respect to weekday or weekends. It evaluates these points based on the level of severity of said accident, with each accident being classified as either Fatal, Serious, or Slight. The data clearly shows that although the amount of Serious and Slight traffic accidents are similar between the weekday and weekend, the number of fatal accidents on the weekdays are significantly greater. Additionally, regardless of the day of week, most car crashes seem to occur between 12PM and 9PM, with a peak at around 4PM.

## 2 - NYC marathon winners

```{r Load Data: Marathon}
#Loads the data for marathon
marathon_file_loc <- here("data", "nyc_marathon.csv")
marathon <- read.csv(marathon_file_loc)
#marathon |> 
  #glimpse()
```

```{r Data Wrangling: Marathon A}
marathon <- marathon |>
  mutate(
    time = hms(time),
  ) |>
  drop_na(time)
```

```{r Graphing: Marathon A}
marathon |>
  ggplot(aes(x = time_hrs)) +
  geom_histogram(bins = 20) +
  labs(
    x = "Time (hours)",
    y = "Number of runners",
    title = "Distribution of Marathon Winner Completion Time",
    subtitle = "Histogram",
    caption = "Source: NYC Marathon | Openintro"
  ) + 
  theme_minimal()

marathon |>
  ggplot(aes(x = time_hrs)) +
  geom_boxplot() + 
  #coord_cartesian(ylim = c(0,30)) +
  labs(
    x = "Time (hours)",
    #y = "Number of runners",
    title = "Distribution of Marathon Winer Completion Time",
    subtitle = "Boxplot",
    caption = "Source: NYC Marathon | Openintro"
  ) +
  theme_minimal()
```
The histogram and boxplot both show that number of runners who completed the marathon after 2.6 hours is very minimal. However, the histogram is able to show that there is a portion of time briefly after 2.25 hours where few to no runners completed the marathon, but the majority of runners completed the marathon at times around then. Additionally, it is able to show the number of runners for each time point. The boxplot, on the other hand, better shows the actual median hours it takes for runners to complete the marathon and the first and third quartile, and thus we can see that more runners finished in between the first quartile and median than the median and third quartile.

```{r}
marathon |>
  ggplot(aes(x = time_hrs, color = division)) +
  geom_boxplot() + 
  facet_wrap(~division) +
  scale_color_manual(values = c("deepskyblue", "salmon4")) +
  labs(
    x = "Time (hours)",
    title = "Distribution of Marathon Winner Completion Time",
    subtitle = "By gender",
    color = "Gender",
    caption = "Source: NYC Marathon | Openintro"
  ) +
  theme_minimal()
```
The median and majority of male runners finish the marathon before minimum time of female runners, with a tighter distance between the outliers than the female runners. Additionally, the more male runners fell between the median and third quartile than fell between the first quartile and median, while female runners were mostly equal. Lastly, both men and women had outliers to the right of the median but none or few to the left.

```{r}
marathon |>
  ggplot(aes(x = time_hrs, color = division)) +
  geom_boxplot() + 
  facet_wrap(~division) +
  coord_cartesian(ylim = c(0, 0.4)) +
  scale_color_manual(values = c("deepskyblue", "salmon4")) +
  labs(
    x = "Time (hours)",
    title = "Distribution of Marathon Winner Completion Time",
    subtitle = "By Gender",
    color = "Gender",
    caption = "Source: NYC Marathon | Openintro"
  ) +
  theme_minimal()
```
The part of the box that goes below 0 is redundant. This increases the data to ink ratio because it gets rid of the extra empty coordinate space below the 0.

```{r}
marathon |>
  ggplot(aes(x = year, y = time_hrs, color = division)) +
  geom_line() + 
  facet_wrap(~division) +
  scale_color_manual(values = c("deepskyblue", "salmon4")) +
  labs(
    x = "Year",
    y = "Time (hours)",
    color = "Gender",
    title = "Marathon winner competion time from 1970 to 2020",
    subtitle = "By gender",
    caption = "Source: NYC Marathon | Openintro"
  ) +
  theme_minimal()
```
The time series shows that not only do both men and women winners show a decrease in marathon time since 1970, but that women winners show a significant decrease in time. The boxplot and histogram can only show the data for all the different years combined.

## 3 - US counties
```{r}
county |>
  head()
```


```{r}
ggplot(county) +
  geom_point(aes(x = median_edu, y = median_hh_income)) +
  geom_boxplot(aes(x = smoking_ban, y = pop2017)) 
```
The code above graphs the median education of a county to the median household income of a county with each county representing one point on the graph. Additionally, it graphs a boxplot for the counties depending on whether or not they had smoking bans with respect to the county population in 2017. This graph does not make any sense because firstly, a scatterplot is not the best way to visualize a variable like median_edu, which has discrete values. Additionally, a boxplot about county smoking regulations does not fit well into the scatterplot because the x values and y values for each graph are completely different. Especially, the coordinates of the y axis squish the box plot to be unreadable at this scale. Lastly, it's unclear what purpose the connection between smoking bans and 2017 population have upon first glance and further explanation is required to understand what the analysis is trying to convey.

```{r}
ggplot(county %>% filter(!is.na(median_edu))) + 
  geom_point(aes(x = homeownership, y = poverty)) + 
  facet_grid(median_edu ~ .)

ggplot(county %>% filter(!is.na(median_edu))) + 
  geom_point(aes(x = homeownership, y = poverty)) + 
  facet_grid(. ~ median_edu)
```
The second graph makes it easier to compare poverty levels across people from different median education levels because you can clearly see a downwards trend, while in the first one, it's not immediately apparent that you should compare the y axis (poverty level) (from 0 - 50) since it's set up to emphasize the x axis (homeownership).

```{r}

```


## 4 - Rental apartments in SF
```{r Load Data: Credit}
#loads credit data
credit_file_loc <- here("data", "credit.csv")
credit <- read.csv(credit_file_loc)
#credit |> 
  #glimpse()
```
```{r}
credit |>
  ggplot(aes(x = income, y = balance, color = student, shape = student)) +
  geom_point(alpha = 0.5) +
  geom_smooth(method = lm, se = FALSE) +
  facet_grid(student ~ married,
             labeller = label_both) +
  # code from http://zevross.com/blog/2019/04/02/easy-multi-panel-plots-in-r-using-facet_wrap-and-facet_grid-from-ggplot2/ and https://www.datanovia.com/en/blog/how-to-change-ggplot-facet-labels/ 
  labs(
    x = "Income",
    y = "Credit card balance",
    color = NULL,
  ) +
  scale_shape_manual(values = c(16, 17)) +
  scale_color_manual(values = c("#440154FF", "#009900")) +
  guides(color = "none", shape = "none") +
  # code from https://stackoverflow.com/questions/35618260/remove-legend-ggplot-2-2
  scale_y_continuous(labels = label_dollar()) +
  scale_x_continuous(labels = label_dollar(suffix = "K")) +
  theme_bw()
```
A. 
The graph above shows individual income compared to credit card balance (from 0 dollars to 2000 dollars). We can see that regardless of marriage status or student status, credit card balance tends to increase as income increases. However, the students not only have a lower positive slope (meaning increases in income correspond to lower increases in credit card balance than non-students), but also fewer students who earn higher incomes. Surprisingly, although whether someone is married or not does not affect the slope (or relative increase in credit card balance per income) for non-students, married students have a significant lower slope than non-married students. However, this trend is not as strong as the non-student data, with many student datapoints not following the trendline from 0K to 50K$. 

B.
Married and student are not useful predictors in addition to income for predicting credit card balance because there was no hugely significant difference between non-married or married non-students with respect to income. Although there was a significant difference between married and non-married student trendlines, the data points themselves are not convincing enough for me to accept the trendline as a close fit for the data and thus, not it is not a good predictor.

```{r}
credit |>
  mutate(
    credit_util = (balance / limit) 
  ) |>
  ggplot(aes(x = income, y = credit_util, color = student, shape = student)) +
  geom_point(alpha = 0.5) +
  geom_smooth(method = lm, se = FALSE) +
  facet_grid(student ~ married,
             labeller = label_both) +
  labs(
    x = "Income",
    y = "Credit Utilization",
    color = NULL,
  ) +
  scale_shape_manual(values = c(16, 17)) +
  scale_color_manual(values = c("#440154FF", "#009900")) +
  guides(color = "none", shape = "none") +
  scale_y_continuous(labels = scales::percent) +
  scale_x_continuous(labels = label_dollar(suffix = "K")) +
  theme_bw()
```
D.
There are more significant variations between various student and marriage statuses from income and utilization than income and credit balance. Between non-students, non-married individuals have a higher credit utilization increase as income increases compared to married individuals. For students, non-married individuals have a significant decrease in credit utilization as income increases while for married students, the credit utilization and income relationship is inconclusive. This is significantly different between the four compared graphs compared to the income and credit balance graphs.

## 5 - Napoleon’s march.

```{r Load Data: Napoleon}
#Loads up napoleon list data
napoleon_file_loc <- here("data", "napoleon.rds")
napoleon <- read_rds(napoleon_file_loc)
#napoleon |>
  #glimpse()
```

