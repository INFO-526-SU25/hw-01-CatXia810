---
title: "HW 01"
author: "Cat Xia"
format: 
  html:
    embed-resources: true
execute: 
  warning: false
  message: false
  error: false
toc: true
---

## 0 - Setup

```{r setup}
if (!require("pacman")) 
  install.packages("pacman")

# use this line for installing/loading
pacman::p_load(tidyverse, here, glue, scales, openintro, ggrepel, gridExtra, grid) 

devtools::install_github("tidyverse/dsbox")
```

## 1 - Road traffic accidents in Edinburgh

Loading the data

```{r Load Data: accidents}
accidents_file_loc <- here("data", "accidents.csv")
accidents <- read.csv(accidents_file_loc)
#accidents |> 
  #glimpse()
```

Changes the time to a seconds format. I initially tried to use R's HMS format, but it created issues with the x axis values.

```{r Data Wrangling: accidents}
#create column that separates weekdays from weekend. Change time to the hour minute second format
accidents <- accidents |>
  mutate(
    day_of_week_cat = ifelse(day_of_week %in% c("Saturday", "Sunday"), "Weekend", "Weekday"),
    time = hms(time),
    time_sec = as.numeric(time)
  )
    #code for ifelse from https://stackoverflow.com/questions/28893193/creating-factor-variables-weekend-and-weekday-from-date
```

Generates the graph. I had to turn seconds back into a time label due to the issue above.

```{r Accidents graph}
accidents |>
  #set x as time in the day, and group as severity
  ggplot(aes(x = time_sec, group = severity, fill = severity)) +
  
  #create a density plot with 50% fill
  geom_density(alpha = 0.7) +
  
  #set manual colors for the graph
  scale_fill_manual(values = c("Fatal" = "#aa93b0", "Serious" = "#9ecac8", "Slight" = "#fef39f")) +
  #Hexcodes taken from online color picker from the original picture
  
  #separate graphs based on weekend or weekday
  facet_wrap(~day_of_week_cat, nrow = 2) +
  
  #labels
  labs(
    x = "Time of day",
    y = "Density",
    fill = "Severity",
    title = "Number of accidents throughout the day",
    subtitle = "By day of week and severity",
    caption = "Source: Data.gov.uk (2018)"
  ) +
  
  scale_x_continuous(breaks = c(0, 14400, 28800, 43200, 57600, 72000, 86400),
                     
    # convert seconds back to HH:MM:SS                
    labels = function(x) {
    hours <- x %/% 3600
    minutes <- (x %% 3600) %/% 60
    seconds <- x %% 60
    sprintf("%02d:%02d:%02d", hours, minutes, seconds)
    #code for sprintf consulted with AI for formatting issues after attempting with https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/sprintf
  })+
  
  theme_minimal()

```

The graph illustrates the density of traffic accidents based on the time of day with respect to weekday or weekends. It evaluates these points based on the level of severity of said accident, with each accident being classified as either Fatal, Serious, or Slight. The data clearly shows that although the amount of Serious and Slight traffic accidents are similar between the weekday and weekend, the number of fatal accidents on the weekdays are significantly greater. Additionally, regardless of the day of week, most car crashes seem to occur between 12PM and 9PM, with a peak at around 4PM.

## 2 - NYC marathon winners

Loads the data.

```{r Load Data: Marathon}
#Loads the data for marathon
marathon_file_loc <- here("data", "nyc_marathon.csv")
marathon <- read.csv(marathon_file_loc)
#marathon |> 
  #glimpse()
```

Creates a new column, time which has time as a R date/time class. I end up using time_hours instead, however, I am unsure why, when I delete this code chunk, the graph does not generate.

```{r Data Wrangling: Marathon A}
marathon <- marathon |>
  #creates a new column where time is in the Hours Minutes Seconds format
  mutate(
    time = hms(time),
  ) |>
  drop_na(time)  #gets rid of any NA values (should only be 1)
```

```{r Graphing: Marathon A}
marathon |>
  #sets x to the hourly time because histograms only have one variable
  ggplot(aes(x = time_hrs)) +
  geom_histogram(bins = 20) +
  #labels the graph
  labs(
    x = "Time (hours)",
    y = "Number of runners",
    title = "Distribution of Marathon Winner Completion Time",
    subtitle = "Histogram",
    caption = "Source: NYC Marathon | Openintro"
  ) + 
  theme_minimal()

marathon |>
  #uses the same variables as above
  ggplot(aes(x = time_hrs)) +
  geom_boxplot() + 
  labs(
    x = "Time (hours)",
    #y = "Number of runners",
    title = "Distribution of Marathon Winer Completion Time",
    subtitle = "Boxplot",
    caption = "Source: NYC Marathon | Openintro"
  ) +
  theme_minimal()
```

**A.** The histogram and boxplot both show that number of runners who completed the marathon after 2.6 hours is very minimal. However, the histogram is able to show that there is a portion of time briefly after 2.25 hours where few to no runners completed the marathon, but the majority of runners completed the marathon at times around then. Additionally, it is able to show the number of runners for each time point. The boxplot, on the other hand, better shows the actual median hours it takes for runners to complete the marathon and the first and third quartile, and thus we can see that more runners finished in between the first quartile and median than the median and third quartile.

```{r Graphing: Marathon B}
marathon |>
  #sets x as time and the color as gender
  ggplot(aes(x = time_hrs, color = division)) +
  geom_boxplot() + 
  
  #splits graph based on gender
  facet_wrap(~division) +
  
  #colors were chosen to be similar to social conceptions of gendered colors
  scale_color_manual(values = c("deepskyblue", "salmon4")) +
  labs(
    x = "Time (hours)",
    title = "Distribution of Marathon Winner Completion Time",
    subtitle = "By gender",
    color = "Gender",
    caption = "Source: NYC Marathon | Openintro"
  ) +
  theme_minimal()
```

**B.** The median and majority of male runners finish the marathon before minimum time of female runners, with a tighter distance between the outliers than the female runners. Additionally, the more male runners fell between the median and third quartile than fell between the first quartile and median, while female runners were mostly equal. Lastly, both men and women had outliers to the right of the median but none or few to the left.

```{r Graphing: Marathon C}
#only thing different from graph above is coord_cartesian which limits the y coordinate without erasing data points.

marathon |>
  ggplot(aes(x = time_hrs, color = division)) +
  geom_boxplot() + 
  facet_wrap(~division) +
  coord_cartesian(ylim = c(0, 0.4)) +
  scale_color_manual(values = c("deepskyblue", "salmon4")) +
  labs(
    x = "Time (hours)",
    title = "Distribution of Marathon Winner Completion Time",
    subtitle = "By Gender",
    color = "Gender",
    caption = "Source: NYC Marathon | Openintro"
  ) +
  theme_minimal()
```

**C.** The part of the box that goes below 0 is redundant. This increases the data to ink ratio because it gets rid of the extra empty coordinate space below the 0.

```{r Graphing: Marathon D}
marathon |>
  ggplot(aes(x = year, y = time_hrs, color = division)) +
  
  #plot is a line graph instead of the prior box graphs
  geom_line() + 
  facet_wrap(~division) +
  scale_color_manual(values = c("deepskyblue", "salmon4")) +
  labs(
    x = "Year",
    y = "Time (hours)",
    color = "Gender",
    title = "Marathon winner competion time from 1970 to 2020",
    subtitle = "By gender",
    caption = "Source: NYC Marathon | Openintro"
  ) +
  theme_minimal()
```

**D.** The time series shows that not only do both men and women winners show a decrease in marathon time since 1970, but that women winners show a significant decrease in time. The boxplot and histogram can only show the data for all the different years combined.

## 3 - US counties

```{r 3a. code provided}
ggplot(county) +
  geom_point(aes(x = median_edu, y = median_hh_income)) +
  geom_boxplot(aes(x = smoking_ban, y = pop2017)) 
```

**A.** The code above graphs the median education of a county to the median household income of a county with each county representing one point on the graph. Additionally, it graphs a boxplot for the counties depending on whether or not they had smoking bans with respect to the county population in 2017. This graph does not make any sense because firstly, a scatterplot is not the best way to visualize a variable like median_edu, which has discrete values. Additionally, a boxplot about county smoking regulations does not fit well into the scatterplot because the x values and y values for each graph are completely different. Especially, the coordinates of the y axis squish the box plot to be unreadable at this scale. Lastly, it's unclear what purpose the connection between smoking bans and 2017 population have upon first glance and further explanation is required to understand what the analysis is trying to convey.

```{r 3b code provided}
ggplot(county %>% filter(!is.na(median_edu))) + 
  geom_point(aes(x = homeownership, y = poverty)) + 
  facet_grid(median_edu ~ .)

ggplot(county %>% filter(!is.na(median_edu))) + 
  geom_point(aes(x = homeownership, y = poverty)) + 
  facet_grid(. ~ median_edu)
```

**B.** The second graph makes it easier to compare poverty levels across people from different median education levels because you can clearly see a downwards trend, while in the first one, it's not immediately apparent that you should compare the y axis (poverty level) (from 0 - 50) since it's set up to emphasize the x axis (homeownership).

```{r}
#Plot A, simple homeownership v poverty
county |>
  ggplot(aes(x = homeownership, y = poverty)) +
  geom_point() +
  labs(
    title = "Plot A"
  )

#Plot B, there is a trend line (done through stat_smooth)
county |>
  ggplot(aes(x = homeownership, y = poverty)) +
  geom_point() +
  stat_smooth(se = FALSE) +
  labs(
    title = "Plot B"
  )

#Plot C, there are two trend lines (done through stat_smooth) that look at if someone has a metro card or not (adding aes(group = group) WITHIN stat smooth)
county |>
  ggplot(aes(x = homeownership, y = poverty)) +
  geom_point() +
  stat_smooth(aes(group = metro), se = FALSE, color = "green") +
  labs(
    title = "Plot C"
  )

#Plot D, the trendlines from C are put behind the plot points, so the different functions are rearranged
county |>
  ggplot(aes(x = homeownership, y = poverty)) +
  stat_smooth(aes(group = metro), se = FALSE) +
  geom_point() +
  labs(
    title = "Plot D"
  )

#Plot E, The data points are grouped by color and the trendlines are distinguished by line type. This is done by passing color and linetype arguments to the respective graphing functions.
county |>
  ggplot(aes(x = homeownership, y = poverty)) +
  geom_point(aes(color = metro)) +
  stat_smooth(aes(linetype = metro), se = FALSE) +
  labs(
    title = "Plot E"
  ) +
  guides(
    color = guide_legend(order = 2), linetype = guide_legend(order = 1)
  )
# code from https://stackoverflow.com/questions/10035551/ordering-of-multiple-legends-guides-what-is-the-automatic-logic-how-to-change

#Plot F, the color is decided globalling, leaving two colors for both the data points and lines
county |>
  ggplot(aes(x = homeownership, y = poverty, color = metro)) +
  geom_point() +
  stat_smooth(se = FALSE) +
  labs(
    title = "Plot F"
  )

#Plot G, the data points are grouped by color but the trendline is not, so color is passed only to geom_point
county |>
  ggplot(aes(x = homeownership, y = poverty)) +
  geom_point(aes(color = metro)) +
  stat_smooth(se = FALSE) +
  labs(
    title = "Plot G"
  )

#Plot H, the datapoints are separated by color, so color argument can be in ggplot.
county |>
  ggplot(aes(x = homeownership, y = poverty, color = metro)) +
  geom_point() +
  labs(
    title = "Plot H"
  )
```

## 4 - Rental apartments in SF

```{r Load Data: Credit}
#loads credit data
credit_file_loc <- here("data", "credit.csv")
credit <- read.csv(credit_file_loc)
#credit |> 
  #glimpse()
```

```{r Graph A: Credit, Marriage, and Student}
credit |>
  ggplot(aes(x = income, y = balance, color = student, shape = student)) +
  geom_point(alpha = 0.5) +
  geom_smooth(method = lm, se = FALSE) +
  
  #split on married status and student
  facet_grid(student ~ married,
             labeller = label_both) +
  # code from http://zevross.com/blog/2019/04/02/easy-multi-panel-plots-in-r-using-facet_wrap-and-facet_grid-from-ggplot2/ and https://www.datanovia.com/en/blog/how-to-change-ggplot-facet-labels/ 
  labs(
    x = "Income",
    y = "Credit card balance",
    color = NULL,
  ) +
  
  #shapes are changed (values found through R documentation)
  scale_shape_manual(values = c(16, 17)) +
  scale_color_manual(values = c("#440154FF", "#009900")) +
  
  #gets rid of legend
  guides(color = "none", shape = "none") +
  # code from https://stackoverflow.com/questions/35618260/remove-legend-ggplot-2-2
  
  #labels each axis points correctly
  scale_y_continuous(labels = label_dollar()) +
  scale_x_continuous(labels = label_dollar(suffix = "K")) +
  theme_bw()
```

A.  The graph above shows individual income compared to credit card balance (from 0 dollars to 2000 dollars). We can see that regardless of marriage status or student status, credit card balance tends to increase as income increases. However, the students not only have a lower positive slope (meaning increases in income correspond to lower increases in credit card balance than non-students), but also fewer students who earn higher incomes. Surprisingly, although whether someone is married or not does not affect the slope (or relative increase in credit card balance per income) for non-students, married students have a significant lower slope than non-married students. However, this trend is not as strong as the non-student data, with many student datapoints not following the trendline from 0K to 50K\$.

B.  Married and student are not useful predictors in addition to income for predicting credit card balance because there was no hugely significant difference between non-married or married non-students with respect to income. Although there was a significant difference between married and non-married student trendlines, the data points themselves are not convincing enough for me to accept the trendline as a close fit for the data and thus, not it is not a good predictor.

```{r Graphing c: credit utilization}
credit |>
  #create a new col for credit utilization
  mutate(
    credit_util = (balance / limit) 
  ) |>
  ggplot(aes(x = income, y = credit_util, color = student, shape = student)) +
  geom_point(alpha = 0.5) +
  geom_smooth(method = lm, se = FALSE) +
  facet_grid(student ~ married,
             labeller = label_both) +
  labs(
    x = "Income",
    y = "Credit Utilization",
    color = NULL,
  ) +
  scale_shape_manual(values = c(16, 17)) +
  scale_color_manual(values = c("#440154FF", "#009900")) +
  guides(color = "none", shape = "none") +
  scale_y_continuous(labels = scales::percent) +
  scale_x_continuous(labels = label_dollar(suffix = "K")) +
  theme_bw()
```

D.  There are more significant variations between various student and marriage statuses from income and utilization than income and credit balance. Between non-students, non-married individuals have a higher credit utilization increase as income increases compared to married individuals. For students, non-married individuals have a significant decrease in credit utilization as income increases while for married students, the credit utilization and income relationship is inconclusive. This is significantly different between the four compared graphs compared to the income and credit balance graphs.

## 5 - Napoleon’s march.

I split my code chunks to show my work and thought process.

```{r Load Data: Napoleon}
#Loads up napoleon list data
napoleon_file_loc <- here("data", "napoleon.rds")
napoleon <- read_rds(napoleon_file_loc)
#napoleon$troops|>
  #glimpse()
```

```{r Napoleon: Line Width}
napoleon$troops |>
  ggplot(aes( x = long, y = lat, group = group)) +
  
  #creates line graph
  geom_path(
    aes(size = survivors, color = direction), 
    
    #changed from reference blog from circle to square because the Original graph has a more square-like shape
    lineend = "square", 
    linejoin = "bevel"
    ) +
  
  #sizes the lines correctly as to be large enough to see a difference but not too large to overwhelm.
  scale_size(range = c(0.3, 14))
```

Borrowed code directly from https://www.andrewheiss.com/blog/2017/08/10/exploring-minards-1812-plot-with-ggplot2/ with minor modifications. I found this blog helpful in getting my bearings on where to start as well as what function to start looking for line shape and size modifications. I move on to another blog for the later code but will refer to this occasionally for inspiration.

```{r Napoleon: March cleanup}
napoleon$troops |>
  ggplot(aes( x = long, y = lat, group = group)) +
  geom_path(
    aes(linewidth = survivors, color = direction), 
    lineend = "square", 
    linejoin = "bevel"
    ) +
  labs(
    x = NULL,
    Y = NULL,
    Title = "Napoleon's March 1812 Charles Minard",
    Subtitle = "Recreation with ggplot2"
  ) +
  scale_size(range = c(0.3, 14)) +
  
  #allows for graph to be rectangular
  coord_fixed(ratio = 2.5) +
  #changes color
  scale_color_manual(values = c("#ADD8E6", "#545454")) +
  theme_minimal()
```

The additions above were all my code. I decided to go with a light blue instead of beige from the original for the advancing to better emphasize the point of the graph which was temperature dependent. I also decided to change the black to a grey for the retreating army so that it would be easier to see the cities which would be graphed on. I will change this to a lighter grey later on.

```{r Napoleon: adding cities}

#It becomes important to refer to these separately from here out so the dataframes are stored into their own variables
troops = napoleon$troops
cities = napoleon$cities
temp = napoleon$temperatures

#stores the plot in troop_march
troop_march <- ggplot() +
geom_path(
  data = troops,
  aes(x = long, y = lat, group = group, linewidth = survivors, color = direction), 
  lineend = "square", 
  linejoin = "bevel",
  ) +
labs(
  x = NULL,
  y = "latitude"
) +
  
  #adds the points first to mark the cities based on longitutude and latitude
geom_point(
  data = cities, 
  aes(x = long, y = lat)) +
  
  #adds the city names based on the longitude and latitude
geom_text_repel(data = cities, aes(x = long, y = lat, label = city), size = 3) +
labs(
  x = "longitude",
  Y = NULL,
  Title = "Napoleon's March 1812 Charles Minard",
  Subtitle = "Recreation with ggplot2"
) +
scale_size(range = c(0.3, 14)) +
coord_fixed(ratio = 2.5) +
scale_color_manual(values = c("#ADD8E6", "#D3D3D3")) +
theme_minimal() +
theme(legend.position = "none")

troop_march
```

I read through http://euclid.psych.yorku.ca/www/psy6135/tutorials/Minard.html to look at geom_point() and geom_text_repel(), before moving to the documentation to understand them. Code is my own.

```{r Napoleon: temperature graph}
temp <- temp|>
  #creates a new col with the correct temperature labels
  mutate(temp_label = paste(temp, "°", format(date, "%b %d")))
  
  #https://blog.devgenius.io/r-for-haters-how-to-convert-date-format-50583214e1c8
 
temp_graph <- temp |>
  ggplot(aes(x = long, y = temp)) +
  
  #I changed the color to blue because I associated cold temperatures with a light blue
  geom_line(color = "#ADD8E6") +
  geom_text_repel(aes(label = temp_label), size = 3) +
  labs(
    y = "°Celsius",
    x = NULL,
) +
  
  #I had to play around with the ratio to get it to fit with the other graph
  coord_fixed(ratio = 0.11) +
  theme_minimal() +
  
  #this code below was taken from the blog itself and cleans up the background grids so that only the y axis lines are present
  theme(panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank(),
        panel.grid.minor.y = element_blank(),
        axis.text.x = element_blank(), axis.ticks = element_blank(),
        panel.border = element_blank())
temp_graph
```

Code for theme() taken directly from <http://euclid.psych.yorku.ca/www/psy6135/tutorials/Minard.html>

```{r Napoleon: generate caption}
my_caption <- ggplot() +
  annotate("text", x = 2, y = 10, size = 2.5, label = "Losses suffered by Napoleon's army in the Russian Campain of 1812.\nTemperatures at different points of winter correlate with the number of soldiers.\nBlue represent advancing army. Grey represents retreating army.")  + 
  theme_void()
```

Inspiration for creating a separate graph with the caption came from https://stackoverflow.com/questions/74639988/r-adding-word-in-the-middle-of-grid-arrange after failure to add caption to grid.arrage

```{r Napoleon: Final}
grid.arrange(troop_march, temp_graph, my_caption, nrow = 3, heights = c(4, 2.7, 1.5), 
  top = "Napoleon's March 1812 Charles Minard Recreation")
```

The code for grid arrange was directly from <http://euclid.psych.yorku.ca/www/psy6135/tutorials/Minard.html> with minor modifications. I played with the heights so that the two graphs would align. I initially had legends, but noticing that the original did not, I opted to leave them out so that it looks cleaner and added it back in the caption. As stated above, the advancing army was changed to blue to better imply the affects of winter and the retreating army changed to grey to better show the names of the cities.

Going back over the code in a general sense, first the code graphs the advancing/retreating army through a linegraph and maps the size to the number of remaining soldiers. It then creates the points for each city with a scatter plot using the longitude and latitude for each point. It then adds the city names through geom_text. The graph is configured into the correct ratio and stored separately and set aside. Then we create another line graph where temperature is mapped to longitude. This is so it can line up with the march. Then, after data wrangling the temperature and dates correctly, it labels each point on the line graph that has a recorded temperature. Lastly, this graph is also configured to the correct ratio and put together with the first graph through grid.arrange(). I was unable to find resources that created a working caption through grid.arrange() and therefore created a third graph for the caption, and added it to the end.
